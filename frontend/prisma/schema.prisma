generator client {
  provider = "prisma-client-js"
  output   = "../app/generated/prisma"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id        Int         @id @default(autoincrement())
  email     String      @unique
  name      String?
  authId    String?     @unique
  avatar    String?
  createdAt DateTime    @default(now())
  updatedAt DateTime    @default(now()) @updatedAt
  role      Role        @default(PATIENT)
  city      String?
  latitude  Float?
  longitude Float?
  region    String?
  chats     Chat[]
  diagnoses Diagnosis[]
}

model Chat {
  id            Int             @id @default(autoincrement())
  chatId        String          @unique
  createdAt     DateTime        @default(now())
  updatedAt     DateTime        @updatedAt
  userId        Int
  hasDiagnosis  Boolean         @default(false)
  user          User            @relation(fields: [userId], references: [id])
  diagnosis     Diagnosis?
  messages      Message[]
  tempDiagnoses TempDiagnosis[]
}

model Message {
  id            Int            @id @default(autoincrement())
  content       String
  role          MessageRole
  createdAt     DateTime       @default(now())
  chatId        String
  type          MessageType    @default(SYMPTOMS)
  chat          Chat           @relation(fields: [chatId], references: [chatId])
  tempDiagnosis TempDiagnosis?
}

model TempDiagnosis {
  id          Int      @id @default(autoincrement())
  confidence  Float
  uncertainty Float
  disease     Disease
  createdAt   DateTime @default(now())
  messageId   Int      @unique
  modelUsed   Model
  chatId      String
  symptoms    String
  chat        Chat     @relation(fields: [chatId], references: [chatId])
  message     Message  @relation(fields: [messageId], references: [id])
  explanation Explanation?
}

model Diagnosis {
  id          Int      @id @default(autoincrement())
  confidence  Float
  uncertainty Float
  disease     Disease
  createdAt   DateTime @default(now())
  chatId      String   @unique
  userId      Int
  modelUsed   Model
  symptoms    String
  city        String?
  latitude    Float?
  longitude   Float?
  region      String?
  chat        Chat     @relation(fields: [chatId], references: [chatId])
  user        User     @relation(fields: [userId], references: [id])
  explanation Explanation?
}

model Explanation {
  id              Int             @id @default(autoincrement())
  createdAt       DateTime        @default(now())
  diagnosisId     Int?            @unique
  tempDiagnosisId Int?            @unique
  tokens          String[]
  importances     Float[]
  diagnosis       Diagnosis?      @relation(fields: [diagnosisId], references: [id])
  tempDiagnosis   TempDiagnosis?  @relation(fields: [tempDiagnosisId], references: [id])
}

enum Role {
  PATIENT
  CLINICIAN
}

enum MessageRole {
  USER
  AI
}

enum MessageType {
  SYMPTOMS
  ANSWER
  QUESTION
  DIAGNOSIS
  URGENT_WARNING
  ERROR
}

enum Disease {
  DENGUE    @map("Dengue")
  PNEUMONIA @map("Pneumonia")
  TYPHOID   @map("Typhoid")
  IMPETIGO  @map("Impetigo")
}

enum Model {
  BIOCLINICAL_MODERNBERT @map("BioClinical-ModernBERT")
  ROBERTA_TAGALOG        @map("RoBERTa-Tagalog")
}
